// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Billboard  Billboard[]
  Category   Category[]
  Size       Size[]
  Color      Color[]
  Product    Product[]
}

model Billboard {
  id        String @id @default(uuid())
  label     String
  image_url String
  storeId   String
  Store     Store  @relation(fields: [storeId], references: [id])

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Category   Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  label       String
  billboardId String
  Billboard   Billboard @relation(fields: [billboardId], references: [id])
  storeId     String
  Store       Store     @relation(fields: [storeId], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Product    Product[]

  @@index([billboardId])
  @@index([storeId])
}

model Size {
  id      String @id @default(uuid())
  label   String
  value   String @unique
  storeId String
  Store   Store  @relation(fields: [storeId], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Product    Product[]

  @@index([storeId])
}

model Color {
  id      String @id @default(uuid())
  label   String
  value   String @unique
  storeId String
  Store   Store  @relation(fields: [storeId], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Product    Product[]

  @@index([storeId])
}

model Product {
  id         String  @id @default(uuid())
  label      String
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  storeId    String
  Store      Store    @relation(fields: [storeId], references: [id])
  categoryId String
  Category   Category @relation(fields: [categoryId], references: [id])
  sizeId     String
  Size       Size     @relation(fields: [sizeId], references: [id])
  colorId    String
  Color      Color    @relation(fields: [colorId], references: [id])
  Image      Image[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([sizeId])
  @@index([colorId])
  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String  @id @default(uuid())
  url       String  @db.Text
  productId String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([productId])
}
